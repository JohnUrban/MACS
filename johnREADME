#change log

##### Date: 2014-06-04
> modifications to file: bin/macs2
added (toward bottom):
def add_calmaxtag_parser( subparsers ):
    argparser_calmaxtag = subparsers.add_parser("calmaxtag",
                                                help = "Simply calculate maximum duplicate tags allowed at a given site with given input paramters" )
    input = argparser_calmaxtag.add_mutually_exclusive_group()
    input.add_argument( "-i", dest = "ifile", type = str, required = False,
                                      help = "Sequencing alignment file. Provide reads file or number of reads with -n." )
    input.add_argument( "-n", dest = "numTags", type = int, required = False,
                                      help = "Number of reads in input file (this allows macs2 to skip counting). Provide number of reads or reads file -i." )
    argparser_calmaxtag.add_argument( "-f", "--format", dest = "format", type = str,
                                      choices=("AUTO","BAM","SAM","BED","ELAND","ELANDMULTI","ELANDEXPORT","BOWTIE"),
                                      help = "Format of tag file, \"AUTO\", \"BED\" or \"ELAND\" or \"ELANDMULTI\" or \"ELANDEXPORT\" or \"SAM\" or \"BAM\" or \"BO$
                                      default = "AUTO" )
    argparser_calmaxtag.add_argument( "-g", "--gsize", dest = "gsize", type = str, default = "hs", required=True,
                                      help = "Effective genome size. It can be 1.0e+9 or 1000000000, or shortcuts:'hs' for human (2.7e9), 'mm' for mouse (1.87e9), $
    argparser_calmaxtag.add_argument( "-p", "--pvalue", dest = "pvalue", type = float,
                                      help = "Pvalue cutoff for binomial distribution test. DEFAULT:1e-5" )
    argparser_calmaxtag.add_argument( "-s", "--tsize", dest = "tsize", type = int,
                                      help = "Tag size. This will overide the auto detected tag size. DEFAULT: Not set" )
    add_outdir_option( argparser_calmaxtag )
    argparser_calmaxtag.add_argument( "-o", "--ofile", dest = "outputfile", type = str,
                                      help = "Output BED file name. If not specified, will write to standard output. DEFAULT: stdout",
                                      default = "stdout" )
    return


> modifications to file: bin/macs2
to 'def prepare_argparser()' I added:
    # command for 'calmaxtag'
    add_calmaxtag_parser( subparsers )


> modifications to file: bin/macs2
added (toward top):
    elif subcommand == "calmaxtag":
        # user only wants to calculate max tags given input paramters
        from MACS2.calmaxtag import run
        run( args )


> copied /usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/johnmacs2/filterdup.py
to /usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/johnmacs2/calmaxtag.py
--- and edited/made changes therein -- as documented by the file itself

> modifications to file: MACS2/OptValidator.py
added "def opt_validate_calmaxtag ( options ):"
- which is an edited version of opt_validate_filterdup
- since I do not have a verbose option, I changed the line "logging.basicConfig(level=(4-options.verbose)*10,"
	to "logging.basicConfig(level=10,"


